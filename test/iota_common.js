const chai = require('chai')
const assert = chai.assert

const { powTrytesFunc, powBundleFunc, genAddressTrytesFunc, genAddressTritsFunc, genSignatureTrytesFunc, genSignatureTritsFunc, transactionHashFunc, bundleMiner } = require('../iota_common')

describe('IotaCommon.powTrytesFunc', function() {
	const tests = [
		{
			input:
				
			expectedLength: 27
		}
	]

	tests.forEach(function(test) {
		it('Should generate valid PoW of length: ' + test.expectedLength, async function() {
			this.timeout(0)
			const pow = await powTrytesFunc(test.input, 14)
			assert.deepEqual(test.expectedLength, pow.length)
		})
	})
})

describe('IotaCommon.powBundleFunc', function() {
	const tests = [
		{
			bundle:
			[
				
				
				
			],
			trunk: 'TXTXVJNFEOP9FUWJOGPGWEFXNX9FHMVMOMPEPYOSVSLVEPKGX9PZCJMSYLQJDEYMKRTSAXAPZWZPSAVFD',
			branch: 'DHVNMEWEEXOQNRGZIF9OFBXXCULWUJQPSKZLDR9TFBSDMDZQ9KGTMKBNTLKDVCPFVOHHJ9WBIEUYNFNN9',
			mwm: 14
		}
	]

	tests.forEach(function(test) {
		it('Should generate valid transaction trytes', async function() {
			this.timeout(0)
			const txs = await powBundleFunc(test.bundle, test.trunk, test.branch, test.mwm)
			txs.forEach(function(tx) {console.log(transactionHashFunc(tx))})
		})
	})
})

describe('IotaCommon.genAddressTrytesFunc', function() {
	const seed = 'NREIZPJYTY9FUVBTLTQWHRUUAQ9YFAUVQVRBAZSIJOIHQMS9UFGSXQDHCRNYCILBXGOQGSFABTPMRESEB'
	const tests = [
		{
			index: 0,
			expected: 'TXTXVJNFEOP9FUWJOGPGWEFXNX9FHMVMOMPEPYOSVSLVEPKGX9PZCJMSYLQJDEYMKRTSAXAPZWZPSAVFD'
		},
		{
			index: 1,
			expected: 'DHVNMEWEEXOQNRGZIF9OFBXXCULWUJQPSKZLDR9TFBSDMDZQ9KGTMKBNTLKDVCPFVOHHJ9WBIEUYNFNN9'
		},
		{
			index: 900,
			expected: 'UTTVTRVZNJDOXPOSRA9IRUSMRSIZWN9MSDOSNTIUFZXUVJIDDP9OODNNEJZWHVTVOZSQBYIDERWJXHOV9'
		}
	]

	tests.forEach(function(test) {
		it(`Should generate valid #${test.index} address:` + test.expected, async function() {
			const address = await genAddressTrytesFunc(seed, test.index)
			assert.deepEqual(test.expected, address)
		})
	})
})

describe('IotaCommon.genAddressTritsFunc', function() {
	const seed = [-1,-1,-1,0,0,-1,-1,-1,1,0,0,1,-1,0,0,1,-1,-1,1,0,1,1,-1,0,-1,1,-1,1,-1,0,0,0,0,0,-1,1,0,1,-1,1,1,-1,-1,1,0,-1,1,-1,0,1,1,-1,1,-1,-1,0,-1,-1,-1,0,-1,0,1,0,0,-1,0,1,-1,0,1,-1,1,0,0,-1,0,-1,0,0,0,1,-1,0,0,-1,1,1,0,0,0,1,-1,1,1,-1,-1,0,-1,1,1,-1,0,0,-1,-1,1,0,1,0,0,-1,0,0,1,0,-1,0,0,1,1,0,1,0,-1,-1,0,0,1,-1,0,1,-1,0,-1,1,1,1,1,0,-1,0,0,0,0,1,-1,0,-1,1,1,-1,1,1,0,-1,0,-1,0,-1,0,-1,1,1,0,-1,0,1,0,1,0,0,0,-1,-1,-1,-1,1,-1,0,0,1,0,0,0,1,0,1,1,-1,1,0,0,-1,0,1,-1,1,0,-1,-1,-1,0,-1,1,-1,1,1,0,-1,0,-1,1,1,0,0,-1,1,0,-1,1,-1,1,-1,-1,1,1,1,0,0,-1,-1,-1,1,1,0,-1,-1,-1,1,-1,1,0]
	const tests = [
		{
			index: 0,
			expected: [-1,1,-1,0,-1,0,-1,1,-1,0,-1,0,1,1,-1,1,0,1,-1,-1,-1,0,-1,1,-1,-1,1,0,-1,-1,1,-1,-1,0,0,0,0,-1,1,0,1,-1,-1,-1,0,1,0,1,0,-1,-1,1,-1,1,1,-1,-1,1,-1,1,-1,-1,0,-1,-1,1,0,-1,1,0,-1,0,-1,-1,-1,0,-1,0,0,0,0,0,-1,1,-1,0,1,1,1,1,1,1,-1,1,1,1,0,-1,-1,1,1,1,1,-1,-1,-1,-1,1,1,-1,-1,1,-1,0,0,-1,-1,1,0,-1,1,1,-1,1,0,-1,0,1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,1,1,1,-1,1,0,-1,0,0,0,0,1,-1,-1,-1,0,0,0,1,0,1,0,1,1,1,1,1,0,-1,1,-1,0,0,1,1,-1,0,-1,1,0,1,1,1,0,-1,-1,1,1,-1,0,1,1,1,-1,1,1,0,0,-1,-1,1,-1,1,0,-1,1,0,0,0,-1,0,1,0,0,1,-1,-1,-1,0,0,-1,-1,0,-1,0,0,1,-1,-1,1,0,-1,1,0,0,1,1,-1,0,-1,1,1,1,0]
		},
		{
			index: 1,
			expected: [1,1,0,-1,0,1,1,1,-1,-1,-1,-1,1,1,1,-1,-1,1,-1,-1,0,-1,-1,1,-1,-1,1,0,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,0,0,-1,1,-1,1,-1,0,0,0,0,1,0,-1,1,0,0,0,0,-1,-1,0,-1,1,-1,1,0,0,-1,0,0,-1,0,0,1,0,0,1,-1,0,1,1,-1,-1,0,0,1,-1,1,0,1,-1,0,-1,1,-1,-1,1,0,-1,-1,1,1,-1,0,0,0,1,1,1,1,0,0,0,-1,0,0,0,-1,1,-1,0,-1,1,-1,1,0,1,0,-1,1,1,0,1,1,1,1,1,0,-1,0,0,-1,0,-1,0,0,0,-1,1,1,1,-1,1,-1,1,-1,1,1,1,-1,1,1,-1,1,0,-1,-1,-1,-1,1,-1,0,1,1,-1,1,1,1,1,0,1,1,-1,0,1,0,1,-1,-1,0,-1,1,1,1,-1,0,-1,-1,-1,0,1,-1,0,1,1,0,1,0,0,0,-1,-1,0,-1,1,0,0,0,1,-1,-1,1,0,1,-1,1,-1,0,-1,-1,-1,0,-1,1,-1,-1,-1,-1,-1,-1,0,0,0]
		},
		{
			index: 900,
			expected: [0,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,1,-1,0,0,-1,1,1,-1,-1,0,0,-1,-1,-1,1,0,1,1,1,0,0,-1,-1,0,-1,0,1,-1,-1,0,-1,-1,1,0,-1,0,0,-1,1,0,0,0,0,0,0,0,1,0,0,-1,0,1,-1,1,0,-1,1,1,1,0,0,-1,1,0,-1,0,0,1,-1,0,0,-1,-1,0,-1,-1,-1,0,0,0,1,1,1,1,0,-1,1,1,0,0,-1,-1,1,0,-1,-1,-1,-1,-1,1,-1,0,0,1,0,1,-1,0,-1,1,-1,0,0,0,-1,0,0,1,-1,1,1,-1,1,0,1,0,0,1,1,1,0,1,1,0,1,-1,-1,0,0,0,0,-1,-1,0,-1,-1,1,1,0,-1,-1,-1,-1,-1,-1,-1,-1,1,1,0,1,-1,0,0,-1,-1,0,-1,0,1,1,1,-1,-1,1,-1,1,1,-1,0,-1,-1,-1,0,0,1,0,-1,-1,0,-1,-1,1,0,1,-1,0,0,0,1,1,1,0,-1,-1,1,0,0,-1,-1,-1,0,1,0,1,0,-1,0,-1,0,1,0,-1,-1,1,1,-1,0,0,0]
		}
	]

	tests.forEach(function(test) {
		it(`Should generate valid #${test.index} address:` + test.expected, async function() {
			const address = await genAddressTritsFunc(seed, test.index)
			assert.deepEqual(test.expected, address)
		})
	})
})

describe('IotaCommon.genSignatureTrytesFunc', function() {
	const tests = [
		{
			seed: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ9ABCDEFGHIJKLMNOPQRSTUVWXYZ9ABCDEFGHIJKLMNOPQRSTUVWXYZ9',
			index: 2,
			security: 2,
			bundle: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ9ABCDEFGHIJKLMNOPQRSTUVWXYZ9ABCDEFGHIJKLMNOPQRSTUVWXYZ9',
			signature: 'IRRWWESEWUSGFCQZQUETVGNLONDOHXJRQPECGNOI9FSDSVDHH9EXGXHLW9TXQSFRZK9TKFMWSLOGAD9OWUCQCZTCRHQXINFJHVGPVWYWFKIGHUAYFWNJXGZZYISMFTVQKDLUQWHEVUWYCIHEVW9QKRJSYDCBTFTOL9HTNPRBPGTSQACDUGZSXRJWSKFJUXCH9TEXJUUDOI9EDDFAQ9QMDNPJDZLZPUMVGBOUNFYHKWSICCGEKLZHECPB9SKR9NW9NUUCIGYJZZHQGAWMA9PFQOQMBFOYXWYZSZRAENTWFOHTYWZCM9NYFBKQGKL9APFFZ9YDMUASLWRMQHJETMUAEY99WGDOUDBSHMPQAPKG9LQHAJMMIEUAX9OQHQKMMNFA9GUDQENAELLL99CZLTRFYNGXUREWFUHIKQJVHCSTOWZIOCJVDE9ZRC9PMJEOUMNRILRBE9KDLKHDRQHIWEDLHVDEHZPOFXYGHHAMACOPNRV9EZBSFYITYURVQSJOZWESIYRMHOYZHEEHMTAYPNMIJMPUF9OSCEWPQEKWOHSOMLPZJUIXWVJMLMDUWCCWGPVKBUUUEGAKJYSYAWWDWY9RZITWOHZTMTXPLHTDFTZJDLBJFFJ9RHXZBBHOIHV9UFRYRAABMKEAUUOOIGCWVNOKKPUODIQJYSFTUAKIBNJ9YIYVCNMUDGHLQENMWSDUHGZIA9FYIPOSFEOLDCRYSXRCJSJOCNIE9GLCRMXQFAUERKRDEAGVVPSSEUFWFFYEYRWAHHZPNQWQYHWCTJXBGSJKBGZGPQZJOVLRFQZGLJURVCSIXOGDPZPIVHDCTOBDEYTVUFILZ9PMBAQNOWHPNBLXYYJSMZKRBACRVPGKXUQSEA9NTHUFUHTP9OYBIIDFJIUGNTNCHVHX99MQ9IAMRNJNZL9KGQ9VKYNXMANFDHABPSYDQLBMTVDOKFFZQZPABWUTLVDKUYKBZNDDM9HZKK9ZL9BHKWGKILNTZGHCWSNKQBITFFRBCZTRNJAHGCZBJVGRYNYYBDYXNWCENEOXDDZODTGMI9LGDVCZWALMADQJHOEHQLYBSRXUSGBBMFENSDX9NVFHHIJAEPRDDNRCN9DMTLOOUASJLXNXLJN9VKEVRLRIMZOYNHGHVERWERXP9NIMMFVZMVWCPAOBZDPKOSNXYK9CZFPUINBREOYJBVBASSWWKKDQGQBBAYPSQCZDFSZZIYJFVMFVHGE9HJZTLB9POVGTBGZCTMBLNXGHZCDUKWAPPTGXKSXSAUKICBRCKYK9KTSNFKEJKJE9UHTCKPNUWRHKSYQRSHIVGRBTRBWEQ9KS9LNTLRUWRLWTVYNLVVMNXPNZPYMATERXEVVTSBRCNYPA9DXNLQXP9RLVAKDAGOJDDOMAXODLLZEHHRFSDDNMPMKOP9YCBDDBTYUYOHCJYQHLKSECHQUWZZRPEYGFSIMMO9JDXDEXUETJIEBJMBTRGFTWXPQZXAWDFNQGPUDQESGAAN9WNFNTDIAZ9DKWJKPOKZESUYMVC9AEVNCTAWZLZB9GUSUWASJTVIJBCKUZLBSBVCUBAAPDTADOSERGKMDLBUGVOHNMPGCLYIPFVECMYXJBFPWWJUVQTJSOY9OWZGYOYZYAUWFRBPRRXMPDQIFLFYEJURGSFT9NOINQF9DSHSNGJKHOUEPPBGOMENJNVFZHHMGOABXTMF9DANGGQGKDCSXZNEOPEMIDOULWF9BHN9UCOZDFOYZ9AHDCEANXWVHNJMOMLVS9YYDHTNEFDPCVKDTCIMHDADUVRKCDNGPWVCJBZOPW9EU9YXOWTVBWHCYCVUIVRGXXIDFWZCDTTTBHWYH9VNT9CEYOEECS9AXYKBCSIHCABBGJYTSKFJJADIMQBZNZLZPIIZDCJDVIWZXGKSQDDMSXCJEWGWAUJXIO9FTHLYXRKQWDKZ9X9HRIKDQXPJSWKNM9S9KWRGTIEHFPVFFYZXRAWSKKXDLBRTTYAXRIKHESEOXCURUPJLXWWIIGDMBUIBRFCLLICDZXDDPSDP9NSZYBIYEZSVIQLQCXZJLHXUJJGPHRDILDMLDSVKXI9LZWZDPIVFABZTVFSNFLUHDBPFMCKNFSTXMTQHGSGXXSRWCRDKBHZGQVEPPRSIHKZSGCZOKJTUNHRDOLNZVXARQXDUZMZZ9AGLOKYBKYRQMDJKQJOIAJXXHYSPUJEL9PSLRGUMNCUZRNDLIUXYVJWGUIFOWVWGFNVVRPWIGS9POUUFBLFH9VYRTOSVLIXJSYOCEXSNRAYWBWYGJRYJGZRZGK9DCSJ9LFZZMNCLQKBMGYJOL9NWEZURYXHEMMEWZPN9SVKRKQVUFGWWRRC9VGA9JVXALSWYDFKYCJQTJAPRACLEUYQSCFHYOUUGMWXZOLOPBA9UGZGDLB9ZKHSYPXLBRVONMZWZZLHQYSNCVDCJXUTVUKAYDAQYYHDMEZVCFASPTGJPVZCZCUKAOVTJCOAIMISYURFVXWNCKSWNHNZWOPUQFTJAFRRFWDHQECFSSOIFICV9GYMCHOBSXFZSCLQMJZJJQYLDYZWISHLIWHIMGSPB9BDZGDZNQXDVTHHFRIIYFQHWFCD9LRDWZBAMHABLKOYGKILGV9DBKJZBOOSHLEIG9NJHRZCNNZAIYTZTPIDJNWFSNAMUNBBY9DMOI9ECDSWOHACKAZOYQAVYJPWMDYIQMLEU9WYCCPGCWUBOBORACRLEAIRZVEALJKPLPJFTPRWGPXCAJHVJ9CTHGYEDGDE9KXLUUBZDDT9RFJAMZGHNGHPIRGPEHHKOMJXXTQQNRKGORUCGZPLKPF9IXEBRRIDGWYGOHSTCTQWGYDDYTRAUQMPYDSHICWRLUBMHTEXRSAHXAKJSGQDEAATAIGWFGJMUKGPLYXFKCWRA9MHUSZBAUEUEBAGEDCUZXS9FCDQIJZNGCKZ9BZDTZUREZNYABOZOKSLYRLZ9DYFIOAVUNEVXSXYJFUYSSPISTPBMNMH9SWFQ9FCOOHSRWGNBEHHVFUYXKZBUWWXHFMYBDICTXZNIYQ9YGFGU9TXHOGFINGUATJFUUCVZZFM9SAGJQOAOQTUWREJFWOEQFCNXPAKVRVKNILWRGISOY9WZHTU9WTUREVHSQKTONDY9NDCNHDRNHOAIKCFSGW9WOTOPVLNDWAUTNVMALCLRDVWYFWSDCPQWHPWMQP9WY9PUVIKOIPFHNOPNS9OSZTHUJXOABLJRMGFEPZUNZMDZSXYNG9OMRJXJUVOMEELLGTLGATQCDVKPFYCQFDYHEKKKIODOSCNSRACPVJWGPLYABFIFKXHABSIABMDJJIYBPIWQEDLPLU9EYCPBVUVKZSVGQQQIJJWTRJVVJARBACTNMHQBQNROFOPLAWITTVWYVMEPYQAPTPSQBLACQYTYZOWXGSMHWI9XV9XSUXJBFV9GZNRQVUJ9OOTQATHEJWPJSWPEEYZGQCJYNDBL9FUXILWGRVATPFYVUWGPDFSZIA9BMICESFCLYAFHOYAEDDXUUSXROOUXOLVLORXEHAMCJCYQWWYWXZUMJQGSJVQGQPMMIJQOLMGE9ZYAQCQLUSOSBXZTXVMCPCL9BRTVGZ9WEUJYYTFPFGPWPOMGKHMMHJVEHTWUOVY99FNBKAQMTCAJFQWQWPXZTHFYWJSJXDMCTCGAKJRJHXHPWAXEFRVOROBXWSWYXGRJ9PNNHDYVANJDZQMZWKYFRFWGLPPWFPJNGJPDYKGTHGDBQPBODBPWFIHBBFEICJLXYEKDJMESTDIKYIYBKLMMKQTPORSFMUVJHWORTZSAQOKCVV9BKBXEXJVZOTZRWPBYNYEQDOKRMEITTJGU9WWGBOAMSCZTRGFNQNQRWTXIMSVOXVNR9GVDJWJVLYEXITUBQPY9VWXWFCRYBGNYWAUWASIBBAESNRNUMHLTLNR9LENCEUGMHQIYUINDGYWJQIHSTQBLPEFCDRYDHQSRFKJKWEAFBJDKRJFAXKIERXURBZWIRCHOBJYTRDMJBBXUZZPZRANPCSSOJGV9HVYHOOEZFNPJOXIXKNPMZVGTPEZ9QGVCSKDAHGEVAZKILDUFZIICUJOLPKRNXJDXYKCNHRJFUJ9VSAIKGBLE9EUSTFDFNKGNHZR9PIWHUHAWBLEFJQM9NTDMOFVAKLOOWS9UCEZSRRDEJZBIZONFEYJZFRFMSFMMSCOPAXULAUKOVDOBXY9OJAFIXT9NY99GLSIFY9ISFBQKUCQQZ9WVMLVRIQWYOGWUBIHLMJAXY99DJFOXMIIRBBGNVVUKEGMV99T9HTXML9EUZYADINHCSQISPTQXKTIHAWYCGYFTRFT99IHJCURQUYMVYKXSBYUALS9GKQ9LOWROQSZANOVISNYYZQK9KBKA'
		}
	]

	tests.forEach(function(test) {
		it(`Should generate valid trytes signature:` + test.signature, async function() {
			const signature = await genSignatureTrytesFunc(test.seed, test.index, test.security, test.bundle)
			assert.deepEqual(test.signature, signature)
		})
	})
})

describe('IotaCommon.genSignatureTritsFunc', function() {
	const tests = [
		{
			seed: [1,0,0,-1,1,0,0,1,0,1,1,0,-1,-1,1,0,-1,1,1,-1,1,-1,0,1,0,0,1,1,0,1,-1,1,1,0,1,1,1,1,1,-1,-1,-1,0,-1,-1,1,-1,-1,-1,0,-1,0,0,-1,1,0,-1,-1,1,-1,0,1,-1,1,1,-1,-1,-1,0,0,-1,0,1,-1,0,-1,0,0,0,0,0,1,0,0,-1,1,0,0,1,0,1,1,0,-1,-1,1,0,-1,1,1,-1,1,-1,0,1,0,0,1,1,0,1,-1,1,1,0,1,1,1,1,1,-1,-1,-1,0,-1,-1,1,-1,-1,-1,0,-1,0,0,-1,1,0,-1,-1,1,-1,0,1,-1,1,1,-1,-1,-1,0,0,-1,0,1,-1,0,-1,0,0,0,0,0,1,0,0,-1,1,0,0,1,0,1,1,0,-1,-1,1,0,-1,1,1,-1,1,-1,0,1,0,0,1,1,0,1,-1,1,1,0,1,1,1,1,1,-1,-1,-1,0,-1,-1,1,-1,-1,-1,0,-1,0,0,-1,1,0,-1,-1,1,-1,0,1,-1,1,1,-1,-1,-1,0,0,-1,0,1,-1,0,-1,0,0,0,0,0],
			index: 2,
			security: 2,
			bundle: [1,0,0,-1,1,0,0,1,0,1,1,0,-1,-1,1,0,-1,1,1,-1,1,-1,0,1,0,0,1,1,0,1,-1,1,1,0,1,1,1,1,1,-1,-1,-1,0,-1,-1,1,-1,-1,-1,0,-1,0,0,-1,1,0,-1,-1,1,-1,0,1,-1,1,1,-1,-1,-1,0,0,-1,0,1,-1,0,-1,0,0,0,0,0,1,0,0,-1,1,0,0,1,0,1,1,0,-1,-1,1,0,-1,1,1,-1,1,-1,0,1,0,0,1,1,0,1,-1,1,1,0,1,1,1,1,1,-1,-1,-1,0,-1,-1,1,-1,-1,-1,0,-1,0,0,-1,1,0,-1,-1,1,-1,0,1,-1,1,1,-1,-1,-1,0,0,-1,0,1,-1,0,-1,0,0,0,0,0,1,0,0,-1,1,0,0,1,0,1,1,0,-1,-1,1,0,-1,1,1,-1,1,-1,0,1,0,0,1,1,0,1,-1,1,1,0,1,1,1,1,1,-1,-1,-1,0,-1,-1,1,-1,-1,-1,0,-1,0,0,-1,1,0,-1,-1,1,-1,0,1,-1,1,1,-1,-1,-1,0,0,-1,0,1,-1,0,-1,0,0,0,0,0],
			signature: [0,0,1,0,0,-1,0,0,-1,-1,-1,0,-1,-1,0,-1,-1,1,1,0,-1,-1,-1,1,-1,-1,0,0,1,-1,1,0,-1,1,-1,1,0,-1,1,0,1,0,-1,0,-1,-1,0,0,-1,0,-1,0,1,-1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,1,-1,-1,-1,0,1,1,0,-1,-1,-1,-1,-1,1,1,0,0,-1,-1,-1,0,1,0,-1,0,1,0,1,0,0,-1,-1,0,-1,1,-1,-1,-1,-1,1,0,1,0,1,-1,1,-1,-1,-1,0,-1,-1,0,0,1,0,0,0,0,-1,1,1,0,-1,1,1,0,1,0,-1,1,1,-1,1,1,0,-1,0,1,-1,0,1,0,0,0,-1,-1,1,0,-1,0,1,-1,1,0,-1,0,-1,0,1,0,1,1,-1,-1,0,0,0,0,-1,1,-1,0,-1,0,-1,0,-1,1,0,-1,0,-1,1,0,0,-1,-1,0,0,-1,1,1,0,0,0,-1,1,-1,-1,1,1,0,-1,1,1,1,1,-1,-1,0,1,0,-1,0,1,1,0,-1,-1,1,-1,1,1,0,0,1,1,0,0,0,0,0,-1,-1,-1,-1,0,0,1,-1,0,1,0,-1,0,-1,0,1,0,-1,0,0,-1,1,-1,0,1,0,0,0,-1,-1,0,1,-1,0,-1,0,-1,0,0,0,1,-1,-1,-1,0,-1,1,1,0,1,-1,0,1,1,1,-1,1,-1,1,1,-1,-1,1,1,-1,-1,-1,0,1,-1,0,-1,-1,0,0,-1,1,-1,1,1,0,0,1,1,-1,1,-1,0,1,0,1,-1,1,0,0,1,-1,0,0,-1,1,-1,-1,0,-1,-1,-1,1,0,1,0,-1,0,1,-1,1,-1,0,0,-1,0,0,1,-1,0,0,0,1,1,0,-1,1,1,1,0,-1,1,-1,1,-1,1,1,-1,-1,0,-1,-1,1,1,1,1,0,0,1,1,0,1,-1,-1,0,-1,-1,-1,0,-1,0,1,-1,-1,1,1,1,-1,0,1,-1,-1,-1,0,1,-1,0,0,1,0,0,0,1,-1,0,1,-1,-1,1,1,1,-1,-1,-1,0,0,0,0,-1,0,-1,-1,1,1,0,0,-1,1,0,1,1,0,-1,1,-1,0,1,1,0,0,1,0,-1,1,0,-1,1,-1,0,-1,1,-1,1,-1,0,-1,-1,0,1,1,0,0,0,-1,0,1,-1,1,-1,-1,-1,-1,1,-1,-1,0,0,-1,-1,1,0,1,-1,-1,1,-1,1,-1,1,-1,1,0,-1,-1,0,-1,1,0,0,0,1,0,1,1,0,0,1,-1,1,-1,1,-1,0,0,1,0,-1,0,-1,0,0,0,-1,1,0,1,-1,-1,0,1,0,-1,-1,1,1,0,-1,1,1,0,1,0,1,-1,0,-1,0,0,1,0,-1,0,1,0,0,0,-1,1,-1,-1,-1,1,0,-1,0,1,0,1,0,1,-1,0,1,-1,1,1,0,0,-1,-1,0,0,1,0,0,0,-1,-1,1,1,1,0,1,1,0,0,-1,1,1,0,0,-1,0,-1,0,0,0,-1,0,-1,1,1,1,1,1,0,-1,-1,-1,1,-1,-1,1,0,1,1,1,0,-1,0,0,0,1,1,-1,0,0,1,-1,-1,0,1,-1,1,1,1,1,1,-1,1,-1,1,-1,1,0,0,-1,-1,0,1,-1,-1,-1,-1,0,-1,1,1,-1,0,-1,0,1,-1,1,1,-1,-1,0,1,0,-1,0,0,1,0,1,0,0,1,0,1,-1,1,-1,-1,1,-1,1,1,0,1,1,-1,0,0,-1,0,1,-1,-1,1,0,1,0,1,-1,-1,-1,1,0,0,0,0,1,0,-1,-1,1,1,0,0,-1,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,0,1,-1,0,1,-1,0,1,0,0,0,1,1,-1,1,1,-1,0,1,0,1,-1,0,0,-1,0,0,-1,0,1,-1,0,-1,1,-1,1,1,0,0,-1,-1,0,1,1,1,1,0,0,0,0,0,1,-1,-1,0,-1,1,-1,0,-1,0,-1,-1,-1,0,-1,1,1,1,-1,1,0,0,-1,1,0,-1,-1,1,-1,0,0,-1,0,-1,-1,0,1,-1,0,-1,0,0,1,0,-1,-1,0,0,0,0,-1,1,0,0,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,0,0,-1,1,0,-1,-1,-1,0,1,-1,1,-1,1,-1,0,-1,-1,0,-1,0,0,0,1,0,1,1,1,0,0,0,-1,-1,-1,1,-1,0,0,-1,1,-1,1,0,-1,1,1,-1,0,-1,1,-1,1,-1,1,1,0,1,1,0,0,0,1,0,0,1,-1,-1,0,-1,1,0,-1,1,-1,0,0,0,0,0,1,-1,0,1,1,0,1,1,1,0,1,-1,1,0,0,1,0,-1,0,1,1,-1,-1,0,0,0,-1,1,1,1,-1,0,-1,-1,0,1,1,0,1,-1,-1,1,-1,1,-1,1,1,1,0,1,-1,1,0,0,-1,-1,1,1,-1,0,0,0,0,0,0,0,-1,-1,0,1,-1,1,1,1,0,0,-1,-1,0,1,-1,1,1,0,-1,1,0,1,0,-1,-1,0,1,1,1,1,1,-1,-1,-1,0,-1,1,0,0,1,-1,-1,-1,1,1,1,-1,1,0,0,0,0,1,1,-1,0,-1,-1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,0,0,1,-1,-1,1,0,1,-1,1,0,0,0,-1,0,0,0,0,0,-1,-1,-1,0,-1,-1,0,1,-1,0,-1,-1,1,1,1,1,1,1,1,1,-1,-1,-1,0,-1,1,1,0,0,0,0,0,1,-1,1,0,1,-1,1,1,0,-1,0,-1,-1,-1,1,-1,-1,-1,1,0,0,-1,-1,1,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,1,0,-1,0,0,0,1,1,-1,1,-1,0,0,-1,0,-1,1,1,-1,0,-1,-1,-1,1,-1,1,0,-1,0,0,1,-1,0,0,-1,-1,-1,1,-1,-1,0,0,-1,1,0,1,-1,-1,0,1,0,0,1,-1,1,1,-1,0,-1,1,0,1,1,1,-1,-1,0,1,0,1,0,1,0,-1,-1,1,-1,0,-1,-1,-1,-1,0,-1,0,0,0,0,1,0,-1,-1,0,1,0,1,0,1,1,1,-1,1,1,0,-1,-1,1,0,0,0,-1,0,0,0,0,-1,0,1,0,0,0,0,1,-1,-1,1,1,1,1,0,1,-1,-1,1,0,-1,-1,0,1,-1,1,1,1,-1,-1,-1,0,0,-1,0,0,1,0,1,1,0,0,-1,-1,1,0,-1,-1,1,0,0,0,-1,1,1,1,1,0,0,1,1,-1,1,1,-1,0,1,1,1,0,0,0,-1,-1,0,-1,-1,0,1,0,0,1,-1,-1,0,-1,-1,1,1,1,0,0,1,1,-1,0,1,1,1,-1,1,1,0,-1,-1,1,-1,0,1,-1,0,0,1,-1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,1,-1,1,-1,0,1,-1,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,-1,-1,1,-1,-1,-1,-1,-1,0,0,-1,1,1,-1,0,0,0,-1,-1,1,-1,0,0,-1,1,0,1,0,-1,0,-1,1,1,-1,0,0,0,1,-1,1,-1,1,-1,0,0,1,-1,0,0,-1,1,1,-1,-1,0,-1,1,0,-1,1,0,1,0,-1,-1,-1,0,0,-1,-1,0,-1,-1,1,1,0,-1,0,0,1,1,-1,0,0,0,-1,1,1,1,-1,0,1,0,-1,-1,1,-1,0,-1,0,0,-1,0,1,-1,-1,1,-1,-1,1,-1,0,1,1,1,1,-1,1,-1,1,0,0,1,-1,0,1,-1,-1,-1,-1,-1,1,1,1,0,0,1,1,0,1,1,1,1,1,-1,-1,0,1,-1,0,-1,1,0,0,0,0,-1,-1,1,0,-1,0,1,0,-1,-1,1,-1,-1,0,1,-1,-1,-1,0,-1,-1,-1,1,-1,1,1,-1,-1,0,0,-1,-1,-1,0,1,1,0,-1,0,-1,-1,1,1,1,0,1,1,1,-1,-1,-1,0,0,1,0,1,0,1,-1,0,0,1,0,-1,0,-1,-1,0,1,1,-1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,-1,-1,-1,0,0,1,0,0,1,0,-1,-1,0,1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,1,0,0,1,-1,0,1,-1,0,1,-1,-1,-1,1,1,-1,1,1,0,0,-1,1,1,1,0,1,1,-1,0,1,0,-1,1,-1,0,1,0,0,-1,-1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,1,-1,1,-1,-1,-1,0,0,-1,-1,-1,0,1,-1,0,0,-1,1,-1,1,1,1,-1,1,-1,0,-1,0,1,-1,-1,0,1,1,-1,0,1,-1,1,-1,1,1,0,0,-1,1,-1,1,-1,-1,0,0,1,0,1,1,1,0,0,1,1,-1,1,0,1,0,1,0,-1,1,0,-1,1,1,0,1,0,0,0,0,0,-1,-1,0,1,0,-1,0,-1,0,0,-1,1,0,-1,1,0,-1,0,1,0,-1,-1,0,0,1,-1,0,1,1,1,-1,0,0,0,0,1,-1,0,-1,1,0,0,-1,1,-1,0,0,0,-1,1,0,0,1,0,0,-1,1,0,1,1,1,-1,1,1,-1,-1,1,1,0,0,0,1,-1,0,1,-1,0,-1,-1,0,-1,-1,0,0,1,1,-1,1,0,1,0,-1,-1,0,1,1,-1,-1,-1,-1,0,-1,-1,-1,1,1,-1,1,1,1,-1,-1,0,1,-1,0,-1,-1,1,1,0,0,0,1,-1,0,-1,1,0,1,1,-1,0,1,0,-1,0,-1,1,-1,1,-1,0,1,-1,1,0,0,-1,1,1,0,0,1,-1,1,0,-1,-1,-1,1,0,1,0,0,0,1,-1,0,0,0,1,1,-1,0,1,1,-1,0,1,0,-1,-1,-1,1,1,1,0,1,-1,1,1,0,1,-1,1,-1,0,1,0,1,1,-1,0,-1,-1,-1,1,-1,-1,-1,1,1,1,-1,-1,0,1,0,-1,1,1,0,0,1,-1,-1,0,1,1,-1,1,-1,0,0,0,0,1,1,0,0,0,0,0,0,-1,1,1,-1,0,0,0,1,1,-1,-1,0,-1,-1,1,0,-1,0,-1,1,-1,-1,1,0,-1,-1,0,1,1,1,1,0,0,1,0,0,0,-1,1,-1,0,1,0,-1,0,-1,0,0,0,-1,0,1,0,1,0,1,1,0,-1,1,0,1,0,-1,-1,0,1,0,-1,-1,-1,0,0,1,-1,-1,1,0,0,0,1,-1,1,0,1,1,0,1,0,0,0,-1,1,1,1,0,-1,0,-1,0,-1,0,-1,1,1,0,0,0,1,-1,-1,-1,1,0,0,-1,-1,1,1,0,0,-1,1,1,0,-1,-1,1,1,0,0,1,-1,1,1,1,-1,1,1,-1,1,-1,-1,1,0,-1,1,0,-1,-1,-1,1,0,1,-1,0,-1,1,-1,-1,0,0,-1,1,0,-1,1,1,-1,0,-1,-1,1,1,-1,0,0,0,-1,-1,-1,0,1,0,0,-1,0,1,-1,0,1,-1,0,0,1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,1,-1,0,-1,0,1,-1,-1,0,0,1,0,-1,1,-1,1,0,1,0,-1,0,-1,1,0,1,-1,1,1,0,-1,1,0,1,-1,1,1,-1,1,0,1,-1,1,-1,0,0,1,-1,1,1,-1,-1,-1,0,-1,-1,0,0,1,0,1,0,-1,-1,1,1,-1,0,1,1,0,0,-1,0,-1,1,-1,0,-1,-1,0,0,1,-1,1,0,1,1,1,0,1,0,1,-1,0,0,-1,1,1,-1,0,1,0,1,0,-1,0,0,1,0,-1,0,0,-1,-1,1,-1,1,1,1,0,1,-1,-1,-1,0,0,1,-1,-1,0,0,1,1,1,-1,-1,0,1,1,1,0,0,1,0,-1,1,-1,0,-1,-1,-1,1,0,1,1,0,-1,-1,1,1,-1,0,-1,1,-1,1,1,-1,0,1,-1,0,-1,1,0,0,1,0,1,1,-1,0,0,0,0,0,1,-1,-1,1,1,1,-1,1,0,1,0,0,-1,0,-1,-1,-1,-1,0,-1,-1,-1,-1,0,-1,0,1,1,-1,-1,-1,-1,-1,-1,1,0,0,1,1,0,-1,0,1,-1,0,1,-1,0,1,0,1,1,0,-1,1,1,1,-1,0,0,-1,1,1,0,0,-1,-1,1,0,1,0,0,0,1,0,0,0,-1,1,1,-1,1,-1,-1,1,-1,1,-1,1,1,0,-1,0,0,1,-1,-1,0,-1,1,0,-1,-1,-1,1,1,0,0,0,0,0,-1,-1,-1,-1,1,-1,-1,0,1,0,1,-1,0,-1,1,0,1,-1,-1,0,1,-1,1,-1,1,-1,-1,0,0,0,0,-1,-1,1,-1,0,-1,1,0,0,0,1,0,0,1,1,1,0,0,-1,1,1,0,1,0,0,1,0,1,-1,1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,0,1,0,-1,0,1,1,1,-1,-1,0,1,0,-1,0,0,0,0,0,0,0,1,1,1,-1,0,-1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,-1,-1,-1,-1,1,0,1,-1,-1,-1,-1,0,0,0,1,1,0,0,0,-1,1,1,1,-1,1,-1,0,-1,0,0,0,1,1,-1,-1,1,1,1,-1,0,-1,-1,-1,0,-1,0,1,1,1,1,0,0,-1,-1,-1,0,-1,1,1,1,0,-1,0,1,1,0,0,-1,1,0,1,-1,-1,1,0,-1,1,-1,0,1,1,0,-1,0,-1,0,1,1,-1,1,0,1,1,1,-1,1,-1,1,1,-1,1,1,0,0,-1,-1,-1,1,1,0,-1,1,0,-1,1,-1,0,0,-1,0,-1,-1,0,0,1,-1,-1,1,0,0,-1,1,0,-1,-1,0,0,1,-1,-1,1,-1,0,1,1,1,1,-1,1,1,0,-1,1,1,0,1,-1,1,-1,0,-1,1,1,-1,1,0,-1,0,0,-1,-1,-1,1,1,0,1,1,0,1,1,1,0,0,0,-1,0,1,-1,0,0,-1,1,1,-1,1,1,0,0,0,-1,0,0,0,1,1,0,0,0,-1,1,0,-1,0,1,-1,1,1,-1,-1,0,1,-1,1,-1,1,1,0,0,1,0,1,1,-1,-1,-1,-1,1,-1,-1,0,0,1,-1,1,-1,0,1,0,1,0,-1,-1,0,1,0,-1,-1,-1,-1,-1,1,1,-1,0,-1,-1,1,0,0,0,1,-1,1,-1,0,-1,1,0,-1,1,0,0,-1,-1,1,0,0,1,0,-1,0,0,-1,1,-1,0,0,-1,-1,-1,-1,1,0,1,1,0,0,-1,0,1,1,-1,1,0,1,0,-1,0,0,-1,1,0,1,0,1,1,1,-1,1,-1,1,0,0,-1,1,-1,0,-1,-1,-1,1,-1,0,1,-1,0,-1,1,0,1,1,0,1,-1,0,0,-1,0,-1,-1,-1,-1,-1,0,0,1,0,-1,-1,1,-1,-1,-1,-1,-1,1,0,-1,-1,0,-1,0,1,1,0,1,1,0,-1,0,0,0,-1,-1,1,1,0,-1,1,-1,1,-1,1,1,1,1,0,0,1,0,0,0,0,1,1,1,-1,1,1,1,0,1,1,-1,0,1,0,-1,0,0,-1,-1,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,0,-1,0,-1,1,0,1,-1,0,1,0,-1,-1,-1,-1,1,-1,0,1,-1,0,-1,0,1,1,1,-1,0,-1,1,0,1,0,-1,0,0,-1,0,-1,0,0,1,-1,1,0,-1,1,-1,1,-1,1,0,-1,1,0,1,1,1,0,-1,1,-1,-1,1,-1,-1,-1,1,0,-1,1,1,0,0,-1,0,0,0,0,-1,-1,-1,1,1,-1,0,-1,1,-1,0,1,-1,0,1,0,0,1,1,0,1,1,0,0,-1,-1,1,1,-1,-1,0,0,-1,1,1,0,1,1,0,-1,-1,-1,0,0,-1,0,1,0,-1,-1,-1,0,0,0,1,1,0,1,1,1,-1,1,-1,0,1,1,0,-1,-1,0,-1,-1,0,1,-1,1,0,0,1,0,-1,1,0,1,0,1,1,0,-1,0,-1,-1,-1,0,-1,0,0,1,1,1,0,1,-1,-1,-1,0,0,0,1,1,-1,-1,1,1,-1,-1,1,1,1,-1,0,0,-1,0,1,1,0,0,-1,0,0,1,1,1,1,-1,0,0,0,-1,-1,1,-1,0,-1,-1,-1,-1,0,1,1,-1,1,-1,0,1,1,1,-1,-1,-1,1,0,0,-1,-1,-1,0,-1,-1,1,0,0,-1,0,-1,0,1,-1,-1,0,0,0,-1,-1,-1,0,0,1,1,1,1,1,1,1,0,-1,1,1,1,-1,-1,0,0,1,1,1,1,1,-1,-1,-1,0,0,1,0,1,-1,-1,1,0,0,0,-1,-1,-1,1,0,-1,0,0,1,1,0,1,-1,-1,-1,1,1,0,-1,-1,1,0,-1,-1,-1,-1,0,-1,0,1,-1,0,-1,1,1,0,0,0,0,1,0,-1,0,0,0,-1,1,1,-1,-1,0,1,-1,0,0,1,-1,-1,-1,-1,1,0,0,0,-1,-1,-1,1,0,-1,-1,1,-1,0,1,0,1,-1,1,0,1,1,-1,-1,1,0,1,0,0,1,0,-1,1,0,-1,-1,-1,0,-1,-1,0,-1,1,1,-1,1,1,1,1,0,-1,0,-1,1,-1,1,-1,0,-1,-1,1,0,-1,1,0,1,0,0,1,-1,0,1,-1,-1,1,0,-1,-1,0,-1,0,1,0,-1,0,0,1,1,0,0,-1,1,1,0,-1,-1,0,0,-1,0,0,0,0,1,1,-1,0,1,0,1,0,-1,1,1,1,-1,1,1,1,0,-1,1,1,1,-1,-1,0,1,1,-1,1,-1,-1,1,0,0,0,-1,0,1,1,0,1,-1,0,0,-1,1,-1,0,1,1,-1,1,0,0,0,0,1,-1,-1,0,-1,-1,1,1,-1,1,-1,1,-1,1,-1,-1,1,0,1,-1,1,-1,0,0,0,1,0,-1,1,-1,1,1,1,-1,1,0,0,1,1,-1,-1,-1,0,-1,0,1,-1,1,-1,0,1,-1,0,0,0,1,0,1,1,0,0,1,-1,-1,1,1,-1,-1,0,1,0,0,1,-1,-1,1,-1,-1,-1,1,-1,1,-1,1,0,-1,0,-1,1,1,1,0,-1,0,-1,0,1,0,-1,1,0,0,0,1,-1,-1,1,1,0,0,1,0,1,0,-1,1,0,0,0,-1,0,1,0,-1,1,1,1,-1,0,-1,1,1,0,0,0,-1,1,1,-1,1,-1,1,0,-1,-1,-1,-1,0,-1,1,-1,1,1,-1,-1,1,1,0,1,-1,1,1,1,0,1,-1,-1,1,0,0,0,0,1,-1,-1,0,1,-1,1,-1,0,1,0,-1,1,1,1,-1,-1,-1,-1,-1,0,1,-1,-1,-1,0,0,0,-1,-1,0,1,-1,1,1,1,0,-1,1,-1,0,-1,0,-1,0,0,-1,1,0,-1,-1,0,1,0,0,1,1,1,-1,1,-1,1,0,0,-1,-1,1,0,-1,1,-1,0,0,-1,-1,1,0,-1,-1,0,-1,-1,1,-1,0,-1,0,0,0,-1,1,1,1,0,-1,0,0,0,0,1,1,-1,-1,-1,-1,1,-1,0,1,1,0,0,-1,0,1,-1,-1,-1,0,0,0,-1,0,1,1,-1,-1,0,-1,1,-1,1,1,-1,1,-1,0,-1,-1,-1,0,1,1,1,1,-1,1,1,-1,1,1,1,-1,-1,-1,0,-1,0,1,-1,-1,-1,-1,-1,-1,0,0,1,-1,-1,1,-1,0,1,1,1,1,0,0,-1,1,-1,-1,-1,1,0,0,-1,0,-1,0,-1,-1,1,1,1,-1,1,1,-1,-1,1,-1,1,0,-1,-1,1,0,0,0,-1,0,1,0,-1,-1,-1,1,-1,0,1,-1,-1,1,0,0,0,0,0,1,1,0,0,-1,0,-1,-1,-1,0,1,1,-1,0,-1,0,-1,0,1,-1,-1,0,0,0,0,0,-1,0,1,1,1,1,-1,1,0,0,-1,1,1,1,1,0,1,0,0,1,-1,1,0,-1,-1,1,0,1,1,1,0,1,1,0,0,-1,-1,1,1,1,1,0,0,0,-1,0,0,-1,-1,1,1,0,0,1,1,0,1,1,-1,0,0,-1,-1,1,-1,0,1,-1,0,1,0,0,-1,0,-1,1,1,0,-1,1,1,0,1,1,0,-1,-1,-1,1,1,1,1,-1,-1,1,1,1,-1,1,1,0,-1,-1,1,-1,-1,0,0,0,1,-1,0,0,1,0,-1,1,0,1,1,0,1,1,0,-1,1,0,-1,1,-1,1,-1,0,0,1,-1,1,-1,0,0,-1,-1,-1,0,1,0,1,0,1,0,1,1,-1,0,-1,0,-1,-1,0,1,0,1,1,-1,1,1,1,0,-1,-1,-1,1,0,1,0,-1,0,1,-1,0,-1,0,1,-1,-1,-1,0,-1,0,0,-1,0,0,0,0,-1,1,-1,-1,-1,-1,1,1,-1,0,1,-1,1,0,-1,1,1,0,-1,0,0,1,1,1,1,1,1,1,0,-1,-1,0,0,0,1,0,1,1,1,0,0,-1,0,1,1,0,-1,-1,1,0,-1,0,0,1,-1,-1,-1,1,-1,1,-1,1,0,1,0,0,1,-1,-1,1,-1,1,0,1,0,1,1,1,1,-1,1,0,-1,1,-1,0,0,-1,1,-1,1,0,-1,1,-1,1,-1,-1,-1,0,0,-1,0,1,-1,-1,-1,0,-1,-1,0,0,0,-1,0,1,0,0,-1,-1,0,1,1,0,0,-1,1,-1,-1,-1,-1,0,-1,1,-1,1,1,-1,-1,0,1,-1,1,1,0,-1,0,-1,-1,-1,1,1,0,-1,1,-1,1,1,0,0,1,0,0,-1,-1,-1,0,0,0,-1,-1,0,-1,-1,-1,0,-1,1,-1,-1,-1,-1,1,-1,1,1,0,0,0,1,1,0,0,-1,0,0,0,0,0,1,1,0,-1,1,1,-1,-1,0,1,0,1,-1,1,1,1,-1,-1,0,-1,-1,-1,1,1,-1,0,0,-1,-1,1,1,0,-1,0,1,-1,1,-1,0,1,1,1,1,1,-1,0,1,0,0,0,0,1,0,0,-1,-1,1,1,1,-1,-1,-1,-1,0,1,0,-1,1,-1,1,0,0,-1,-1,0,-1,0,0,0,1,1,-1,0,0,-1,1,0,0,0,0,1,-1,1,0,1,-1,1,0,-1,0,1,-1,-1,-1,0,1,0,0,1,0,-1,1,0,1,-1,1,-1,1,1,-1,0,0,1,1,0,1,-1,1,0,0,1,0,-1,1,1,0,1,-1,-1,0,0,0,1,1,-1,1,0,1,0,-1,-1,1,0,1,1,-1,0,1,0,0,1,-1,-1,1,0,1,0,0,1,0,0,1,-1,-1,1,1,0,-1,1,-1,1,0,0,1,1,0,0,-1,-1,1,0,-1,-1,-1,1,0,0,-1,1,-1,1,-1,1,1,1,1,1,1,1,0,0,1,1,-1,1,0,0,1,-1,1,-1,1,1,1,-1,0,-1,-1,-1,0,1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,1,0,1,0,0,1,1,1,-1,0,0,0,1,1,-1,-1,0,-1,1,1,1,-1,-1,-1,1,0,1,0,1,1,1,1,-1,0,0,-1,0,1,0,1,-1,1,0,0,-1,1,1,-1,-1,-1,-1,0,-1,-1,0,1,0,1,0,1,-1,1,1,-1,-1,0,-1,-1,1,-1,1,0,1,1,0,-1,0,-1,-1,1,-1,0,0,0,0,0,-1,-1,-1,-1,0,-1,0,0,1,-1,1,1,-1,0,0,-1,-1,1,-1,0,-1,0,0,1,-1,0,1,0,0,0,1,-1,-1,-1,0,0,-1,1,0,0,-1,-1,1,0,1,-1,-1,0,0,-1,0,0,-1,0,-1,0,1,1,1,1,-1,-1,1,1,0,-1,0,-1,0,0,1,0,-1,1,0,1,1,0,-1,1,1,-1,0,-1,-1,1,1,0,1,0,1,-1,0,0,-1,1,-1,1,1,0,-1,0,-1,1,-1,1,-1,0,0,0,-1,-1,-1,0,-1,-1,0,0,1,-1,-1,-1,-1,0,-1,0,-1,1,0,0,0,1,1,0,1,0,-1,-1,0,1,1,0,-1,-1,-1,-1,1,-1,1,1,0,1,-1,1,1,-1,0,1,0,-1,-1,0,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,0,1,-1,1,0,-1,-1,1,1,1,-1,-1,1,-1,-1,-1,1,0,1,-1,-1,-1,1,1,-1,0,-1,1,-1,0,0,-1,0,1,-1,0,1,1,1,1,1,-1,1,0,-1,-1,1,0,0,-1,1,0,0,-1,0,-1,1,-1,1,1,1,0,-1,1,0,0,0,1,1,0,1,0,0,-1,-1,-1,1,-1,1,1,-1,1,-1,0,-1,1,-1,1,-1,1,1,1,1,0,0,1,0,1,0,-1,0,-1,0,-1,0,0,-1,-1,-1,-1,-1,1,0,-1,-1,1,-1,-1,-1,-1,1,1,1,1,0,0,1,1,1,0,0,-1,-1,0,1,-1,0,1,1,-1,-1,0,0,-1,1,0,0,0,-1,1,0,-1,0,1,-1,-1,-1,0,0,0,0,1,-1,0,1,0,0,-1,-1,-1,0,0,1,1,0,0,-1,1,0,-1,-1,1,-1,0,-1,0,0,0,0,0,1,0,0,-1,0,1,1,1,0,0,1,0,-1,-1,1,1,0,0,-1,-1,-1,0,-1,0,-1,-1,0,1,1,-1,-1,0,1,-1,-1,-1,1,0,1,1,1,1,0,-1,-1,1,1,1,0,1,1,1,1,-1,1,0,-1,0,0,0,1,-1,0,1,-1,0,1,1,0,-1,0,1,-1,1,-1,-1,-1,-1,-1,-1,1,0,-1,1,1,1,0,1,-1,-1,0,1,0,1,1,-1,-1,1,1,1,1,0,-1,1,-1,0,1,0,0,0,1,1,1,1,-1,0,1,1,1,0,1,0,0,1,1,0,0,1,-1,1,1,-1,0,0,-1,-1,1,1,0,1,0,1,1,0,-1,-1,-1,1,-1,1,1,-1,-1,-1,-1,0,1,1,-1,0,1,0,1,0,1,-1,1,0,-1,0,0,0,-1,-1,1,-1,-1,-1,-1,0,0,0,0,-1,-1,1,0,1,-1,0,0,0,1,-1,0,0,-1,0,0,-1,-1,-1,-1,0,-1,1,-1,1,1,-1,-1,1,0,-1,-1,0,-1,0,1,0,1,0,1,-1,0,0,1,0,1,1,-1,0,1,-1,0,0,1,1,1,-1,0,0,-1,1,-1,1,0,-1,0,0,-1,0,0,0,1,1,1,0,0,-1,1,-1,-1,0,-1,0,0,0,1,0,1,1,0,-1,1,-1,-1,1,-1,-1,1,-1,-1,1,0,-1,0,1,-1,-1,0,1,-1,0,-1,0,1,0,0,0,1,1,-1,-1,-1,-1,-1,1,-1,0,0,0,0,1,0,-1,-1,1,1,-1,0,0,-1,-1,-1,-1,1,-1,-1,1,0,1,0,1,0,-1,0,0,0,1,0,0,0,-1,0,1,-1,0,-1,1,1,-1,1,0,0,1,0,1,0,-1,0,0,1,-1,0,1,0,1,0,1,0,0,-1,1,0,-1,1,0,1,-1,1,1,0,1,1,-1,0,-1,1,-1,1,0,-1,-1,1,1,0,-1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,-1,0,-1,-1,1,0,-1,0,0,-1,-1,-1,-1,0,0,0,1,1,-1,0,0,1,-1,-1,0,0,1,0,0,1,-1,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,1,-1,0,0,1,-1,-1,0,-1,0,0,0,-1,0,1,-1,1,-1,1,1,1,0,-1,-1,0,-1,1,1,0,1,1,0,1,1,1,1,0,-1,0,-1,0,0,1,0,1,0,1,-1,-1,1,-1,-1,0,1,-1,1,-1,-1,0,1,0,0,0,1,-1,1,0,1,0,-1,0,0,0,1,0,-1,-1,0,0,0,0,-1,1,-1,1,-1,-1,0,1,0,1,1,1,-1,0,0,-1,0,0,0,-1,-1,1,1,-1,0,-1,-1,-1,0,1,1,0,-1,1,1,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,1,0,0,-1,0,0,1,-1,1,1,1,1,0,-1,0,-1,0,-1,0,1,-1,-1,1,0,1,1,0,-1,-1,-1,0,-1,1,1,-1,-1,-1,1,1,1,0,0,0,1,0,-1,0,0,0,-1,1,1,-1,-1,0,0,0,-1,1,-1,1,-1,1,-1,0,0,1,-1,-1,1,-1,0,1,0,-1,1,1,-1,-1,1,1,-1,0,-1,1,0,-1,1,1,-1,0,-1,0,0,0,-1,0,0,0,-1,1,0,0,-1,-1,0,1,0,-1,-1,1,1,-1,1,1,0,-1,0,1,1,0,0,1,1,-1,1,0,0,0,-1,-1,1,-1,-1,1,-1,1,-1,0,1,0,0,0,-1,0,0,0,-1,0,0,1,-1,1,1,-1,0,1,-1,-1,1,1,0,-1,-1,-1,1,0,-1,-1,0,-1,0,0,1,0,0,1,-1,0,0,-1,0,1,-1,1,-1,-1,1,0,1,0,1,1,0,-1,0,-1,-1,0,-1,-1,0,0,0,1,0,0,1,1,-1,1,1,1,0,1,1,1,-1,1,0,0,1,-1,0,0,1,-1,1,0,0,0,-1,0,-1,1,0,1,0,0,1,1,0,1,1,0,0,1,0,1,0,1,1,0,-1,0,0,0,-1,0,1,1,0,1,1,0,1,-1,-1,1,0,-1,1,1,0,1,-1,-1,0,0,0,-1,-1,-1,1,0,-1,-1,0,0,1,-1,0,-1,1,0,0,0,1,1,-1,0,-1,-1,1,-1,0,0,1,0,-1,1,1,-1,0,0,1,-1,0,-1,0,1,1,-1,0,-1,0,1,0,0,-1,0,-1,0,0,1,0,1,0,1,1,-1,0,1,0,-1,0,0,1,-1,1,0,1,1,0,1,1,-1,1,1,-1,-1,-1,0,1,0,0,-1,1,1,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,-1,1,1,-1,-1,1,1,0,-1,0,0,0,1,0,0,0,0,1,1,-1,0,0,-1,-1,0,-1,0,0,1,1,0,1,-1,-1,0,0,1,1,1,-1,0,-1,1,1,0,0,-1,1,0,-1,0,0,-1,1,-1,1,1,-1,0,-1,1,1,0,-1,-1,-1,-1,0,-1,1,0,1,1,0,1,-1,-1,0,1,1,1,0,-1,1,0,1,-1,-1,0,-1,1,1,1,1,0,1,0,-1,1,1,-1,-1,-1,0,-1,1,1,0,-1,-1,1,-1,0,-1,0,1,1,1,-1,1,-1,-1,0,-1,-1,0,1,1,-1,1,1,0,-1,1,-1,1,0,-1,0,0,-1,0,1,0,-1,0,0,-1,-1,-1,0,0,1,0,0,0,-1,1,1,0,-1,1,1,-1,1,0,-1,0,1,-1,0,0,1,-1,1,-1,0,-1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,0,0,-1,1,0,-1,0,0,1,-1,0,1,-1,1,1,-1,0,0,1,0,-1,1,-1,1,0,1,0,-1,0,0,0,-1,-1,-1,1,1,1,0,1,-1,1,-1,0,1,-1,-1,-1,-1,-1,0,1,0,0,-1,1,1,0,0,-1,-1,0,1,1,-1,-1,-1,-1,0,0,1,1,-1,0,-1,0,1,0,0,0,0,-1,-1,0,-1,0,-1,0,1,1,0,0,1,-1,-1,0,0,1,1,1,-1,0,0,-1,0,0,0,0,0,1,0,0,1,-1,1,0,1,1,0,-1,-1,-1,1,1,1,-1,0,-1,1,0,-1,1,1,1,-1,0,0,0,-1,-1,0,-1,1,1,1,1,1,0,1,0,1,-1,1,1,-1,0,-1,1,0,1,0,-1,-1,0,0,1,1,0,0,1,0,1,0,-1,0,0,-1,0,-1,0,1,1,-1,0,1,0,-1,1,-1,-1,0,1,-1,1,0,1,-1,-1,1,0,1,1,0,0,0,1,-1,-1,1,0,-1,0,1,1,0,0,-1,1,-1,1,0,1,-1,1,1,1,-1,-1,-1,0,1,0,0,1,-1,-1,0,0,0,0,-1,-1,-1,-1,1,1,0,0,1,1,0,0,1,0,1,-1,0,-1,0,1,-1,0,1,1,-1,1,0,1,-1,-1,0,1,-1,1,0,1,-1,0,0,1,0,-1,1,0,-1,-1,-1,-1,0,1,1,-1,-1,-1,0,1,-1,1,0,-1,1,-1,-1,-1,1,1,-1,1,1,-1,0,0,-1,1,-1,-1,-1,-1,0,0,0,1,1,-1,1,1,0,-1,0,0,0,1,-1,-1,0,-1,-1,0,1,-1,0,1,-1,0,-1,1,-1,1,0,0,1,1,0,-1,1,-1,0,1,0,0,0,1,1,-1,1,-1,0,0,0,-1,-1,1,-1,0,-1,-1,1,0,-1,1,1,-1,0,1,1,0,0,1,0,-1,0,1,0,1,1,0,-1,1,-1,0,0,-1,-1,0,1,0,-1,-1,1,0,-1,0,1,0,-1,-1,-1,-1,0,0,-1,1,0,0,1,-1,0,-1,-1,0,-1,1,0,-1,-1,0,1,-1,0,1,-1,1,1,0,1,0,0,-1,1,-1,0,1,0,1,1,-1,1,-1,0,0,0,0,-1,-1,0,0,1,-1,1,-1,1,1,0,0,0,1,1,0,0,1,0,1,0,-1,1,0,1,0,0,0,0,1,1,0,-1,1,-1,0,0,-1,0,0,1,1,1,-1,-1,-1,0,1,0,0,1,1,-1,0,-1,-1,1,1,-1,1,0,1,1,1,1,-1,1,1,-1,0,1,0,1,0,-1,-1,0,1,1,0,0,0,-1,-1,-1,-1,-1,0,-1,-1,1,-1,0,0,0,1,-1,0,0,-1,1,-1,0,0,-1,0,-1,0,1,-1,-1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,0,-1,0,0,1,-1,-1,-1,-1,-1,0,0,0,1,0,-1,1,1,-1,-1,1,1,0,0,-1,-1,1,1,-1,0,-1,1,1,-1,0,1,-1,0,-1,1,1,-1,1,-1,-1,0,-1,-1,0,0,0,-1,0,0,-1,0,1,0,0,0,0,1,1,-1,1,-1,1,1,0,0,0,0,0,1,0,1,1,1,-1,0,-1,0,1,0,0,0,1,1,1,0,-1,-1,-1,0,1,-1,0,1,1,0,0,-1,1,-1,1,1,1,-1,0,0,1,0,1,0,1,-1,0,-1,-1,1,-1,1,0,1,1,0,0,1,-1,-1,0,0,-1,1,0,0,0,1,0,0,1,1,-1,-1,1,0,1,-1,1,-1,0,-1,0,-1,1,0,-1,0,1,0,0,-1,1,-1,0,1,1,-1,0,0,-1,-1,0,1,-1,0,1,-1,1,-1,1,1,1,1,-1,-1,0,0,-1,0,-1,0,0,0,-1,-1,0,1,1,0,-1,-1,1,-1,-1,-1,1,0,1,0,0,0,0,0,0,1,-1,1,-1,1,-1,0,0,1,-1,1,1,1,0,0,1,1,-1,1,0,0,0,0,-1,0,0,-1,1,1,-1,0,1,1,0,-1,1,-1,0,1,-1,-1,0,-1,0,0,1,1,-1,1,0,0,0,-1,1,1,-1,0,-1,-1,-1,-1,-1,1,1,1,-1,0,0,-1,-1,0,-1,0,0,-1,0,0,0,1,1,-1,0,1,-1,0,-1,1,-1,0,1,0,-1,-1,-1,-1,0,1,0,1,1,-1,1,1,0,0,1,0,1,0,1,0,-1,0,0,1,-1,-1,1,-1,1,1,-1,0,1,-1,-1,1,1,1,0,0,1,-1,0,1,1,0,1,0,0,-1,0,-1,1,-1,0,1,-1,0,-1,0,1,1,1,0,1,1,1,-1,-1,1,-1,0,0,1,1,-1,0,1,0,0,-1,1,1,0,0,1,0,-1,1,-1,-1,-1,1,-1,1,-1,1,1,0,1,1,-1,-1,1,1,-1,-1,0,0,0,1,0,-1,0,0,0,1,0,0,1,-1,-1,1,1,1,0,0,0,-1,-1,1,1,-1,-1,1,-1,1,0,1,0,1,0,0,-1,-1,1,0,0,0,0,1,1,1,1,0,0,1,1,0,-1,1,-1,0,0,1,-1,0,0,-1,0,-1,1,1,1,-1,0,-1,0,-1,-1,0,-1,-1,-1,0,1,0,-1,1,1,1,0,-1,-1,-1,0,-1,-1,-1,-1,0,1,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,1,-1,-1,0,1,-1,-1,0,-1,0,-1,1,-1,1,-1,1,0,1,1,0,0,0,-1,1,0,0,-1,0,0,-1,0,-1,1,-1,-1,0,1,1,0,-1,0,1,-1,0,-1,-1,-1,1,0,1,0,0,-1,1,1,0,-1,1,0,-1,0,-1,-1,0,0,1,0,-1,1,0,0,1,0,1,0,1,1,-1,0,0,0,1,-1,1,1,-1,0,1,1,1,0,1,0,-1,0,1,0,-1,-1,-1,1,0,1,0,-1,0,-1,0,0,-1,1,-1,0,0,1,0,-1,0,1,0,0,1,1,-1,0,-1,1,1,1,1,0,1,-1,0,0,1,0,1,1,0,1,-1,0,-1,1,-1,0,0,1,1,1,1,0,1,-1,0,-1,0,0,-1,-1,0,0,0,1,1,0,-1,-1,0,1,0,1,1,0,0,1,-1,-1,0,-1,0,1,0,0,1,1,1,1,1,-1,1,1,0,-1,1,-1,-1,-1,1,0,0,0,0,-1,1,0,1,1,0,-1,0,0,1,-1,1,1,1,0,-1,0,0,-1,-1,-1,-1,0,-1,0,-1,0,1,1,0,1,1,-1,-1,1,-1,-1,0,1,-1,0,1,0,-1,1,0,0,-1,0,0,1,0,0,1,1,-1,0,0,-1,1,-1,0,-1,-1,0,1,-1,-1,0,0,-1,1,0,1,0,1,1,0,0,0,0,0,1,1,0,0,-1,1,1,0,-1,-1,0,-1,0,0,-1,1,0,1,0,0,1,1,1,-1,0,1,1,0,0,-1,1,0,0,1,1,-1,1,1,0,-1,-1,1,-1,0,1,-1,1,-1,1,1,0,0,1,0,1,1,1,-1,1,1,1,-1,0,0,0,1,1,0,-1,1,0,-1,1,1,1,0,1,-1,0,0,-1,1,0,0,-1,-1,0,-1,-1,1,0,-1,-1,0,1,0,1,1,-1,-1,1,0,0,1,1,-1,1,0,0,0,-1,-1,-1,1,0,1,-1,0,1,0,0,-1,-1,0,0,0,1,0,-1,-1,-1,-1,-1,-1,-1,0,0,1,0,0,0,0,1,1,-1,0,-1,1,-1,-1,0,0,-1,1,-1,1,-1,-1,0,0,1,1,1,0,1,0,1,-1,-1,-1,-1,-1,0,0,-1,1,1,0,-1,-1,-1,-1,1,0,0,1,1,1,0,1,-1,-1,-1,-1,-1,1,0,-1,1,0,1,-1,0,0,0,0,1,1,0,1,1,1,0,-1,-1,0,0,1,0,0,0,-1,-1,1,0,1,0,1,1,0,1,0,-1,-1,-1,0,0,-1,-1,-1,0,1,1,0,0,0,1,0,-1,1,1,1,0,0,-1,0,0,0,-1,-1,1,-1,0,-1,0,-1,1,0,0,1,1,-1,1,-1,0,1,0,1,1,-1,-1,-1,-1,0,1,1,1,1,1,0,1,-1,0,0,0,1,-1,0,-1,1,1,1,0,1,1,-1,-1,1,0,1,-1,0,0,0,-1,-1,0,1,-1,0,0,1,0,0,1,0,1,-1,-1,1,-1,1,0,1,0,-1,-1,0,0,1,-1,-1,1,0,0,-1,-1,-1,1,0,0,-1,-1,0,0,-1,1,0,0,0,1,0,0,0,-1,0,1,1,-1,-1,1,1,0,0,0,0,1,0,0,-1,-1,0,0,1,1,-1,-1,-1,1,1,0,0,0,1,1,1,0,1,-1,1,1,1,-1,-1,0,1,1,1,-1,-1,1,0,1,0,-1,1,-1,1,-1,1,-1,-1,0,0,-1,-1,-1,0,1,-1,1,1,-1,-1,0,-1,0,0,1,0,1,0,0,1,0,1,-1,0,1,1,1,-1,1,0,1,0,0,0,0,1,0,-1,1,-1,-1,0,1,1,-1,1,1,-1,0,-1,-1,1,1,1,0,1,-1,1,1,1,0,-1,-1,1,0,0,0,-1,1,1,0,-1,0,0,1,1,0,1,-1,0,1,-1,-1,1,0,-1,0,0,1,1,0,1,1,0,-1,1,-1,0,0,0,0,0,-1,0,-1,1,1,0,1,1,0,0,1,1,1,-1,0,0,1,-1,1,-1,0,1,-1,-1,-1,1,-1,1,-1,0,1,1,-1,-1,0,0,1,0,0,-1,1,-1,1,1,-1,-1,-1,-1,1,-1,0,1,-1,0,1,-1,1,1,0,-1,-1,1,1,1,1,0,1,0,-1,0,0,-1,0,-1,1,-1,-1,0,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,1,1,1,-1,1,0,-1,-1,0,0,-1,0,1,-1,0,1,0,1,-1,1,-1,0,0,1,-1,-1,0,1,1,-1,1,1,1,-1,-1,0,-1,1,0,0,0,0,0,1,0,-1,0,-1,-1,1,-1,1,0,0,0,-1,0,0,-1,0,0,1,1,1,0,1,-1,1,-1,-1,0,1,-1,0,1,-1,1,0,-1,-1,-1,0,1,1,0,-1,-1,1,-1,0,1,0,-1,1,-1,-1,0,-1,-1,-1,0,1,-1,1,1,-1,0,1,1,0,1,1,0,1,-1,0,-1,1,-1,0,0,-1,1,0,0,0,1,-1,-1,0,-1,1,1,1,1,-1,-1,1,-1,0,1,1,0,1,0,-1,-1,0,1,0,0,1,0,1,0,-1,-1,0,0,0,-1,0,1,1,0,1,-1,-1,1,0,1,1,1,-1,0,1,-1,1,-1,-1,-1,1,0,-1,0,0,0,-1,1,0,-1,1,0,0,-1,0,1,0,-1,0,1,0,0,-1,1,1,1,0,1,1,0,-1,1,-1,1,-1,0,-1,1,1,0,-1,-1,1,1,0,0,1,0,0,-1,1,-1,1,0,0,0,0,1,1,-1,1,-1,-1,0,0,-1,1,1,-1,1,1,0,1,1,1,1,0,1,-1,-1,1,1,1,-1,1,1,-1,-1,0,1,1,1,-1,0,0,-1,0,0,-1,1,-1,1,1,0,1,0,-1,-1,0,0,0,-1,1,0,0,0,0,0,1,1,1,-1,0,1,0,1,-1,1,0,-1,-1,0,0,-1,1,0,1,0,0,0,1,-1,-1,-1,1,0,1,-1,-1,-1,1,-1,1,0,1,0,0,1,-1,1,-1,-1,1,1,1,0,0,1,0,0,1,-1,-1,0,0,0,-1,0,1,0,-1,0,0,0,0,-1,1,0,1,0,1,1,0,-1,0,-1,0,0,1,1,0,1,-1,0,0,-1,-1,-1,1,-1,1,0,1,0,-1,1,1,-1,0,0,0,0,0,-1,1,0,-1,0,0,1,1,0,-1,1,-1,-1,0,0,0,1,-1,0,0,-1,-1,-1,1,-1,0,0,-1,-1,-1,1,-1,0,1,0,0,-1,1,0,0,-1,-1,-1,0,0,0,-1,-1,-1,1,1,1,0,-1,0,1,1,1,-1,0,0,0,-1,0,1,1,-1,0,0,0,0,0,1,1,0,1,-1,0,0,-1,1,0,0,1,0,-1,-1,1,0,0,1,1,-1,0,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,0,-1,0,1,0,-1,0,-1,0,1,-1,0,1,0,1,0,-1,1,0,1,-1,1,-1,0,1,0,-1,1,0,-1,1,-1,-1,0,0,1,1,0,-1,-1,1,-1,1,-1,-1,-1,1,0,1,1,1,-1,-1,-1,1,1,1,-1,0,1,0,0,0,1,0,-1,-1,-1,0,0,-1,1,-1,0,-1,0,0,0,0,-1,1,0,1,0,0,-1,-1,0,-1,-1,-1,0,1,1,0,-1,0,0,-1,-1,-1,0,1,-1,1,-1,-1,-1,-1,1,0,-1,-1,1,-1,0,1,-1,0,1,1,1,-1,0,-1,1,0,1,-1,1,-1,0,0,-1,0,-1,1,1,-1,0,0,-1,1,0,0,1,-1,-1,-1,0,-1,-1,0,0,-1,0,-1,0,1,0,-1,1,1,1,1,1,-1,0,-1,1,0,1,1,0,0,0,1,0,1,0,-1,1,-1,0,-1,0,-1,0,0,-1,-1,-1,0,0,1,1,-1,0,-1,0,-1,0,0,0,1,-1,0,1,-1,1,0,-1,1,1,-1,1,0,1,-1,0,0,0,-1,1,-1,0,-1,0,-1,0,1,0,-1,-1,1,-1,1,0,-1,1,0,0,1,-1,-1,-1,1,-1,1,0,1,-1,1,0,0,-1,1,-1,1,0,1,0,-1,1,0,1,-1,0,1,-1,0,1,0,1,1,-1,-1,0,0,-1,0,0,0,-1,1,1,1,1,0,0,0,1,0,-1,1,0,0,1,-1,1,1,0,1,-1,0,-1,0,-1,-1,1,0,0,0,-1,-1,-1,0,-1,-1,1,-1,0,1,-1,-1,-1,0,0,0,-1,-1,-1,1,1,0,1,0,-1,1,-1,-1,0,0,-1,-1,-1,-1,1,-1,0,-1,0,-1,1,0,1,0,-1,-1,-1,0,-1,0,1,-1,-1,1,0,0,-1,1,1,1,1,-1,0,0,-1,1,1,-1,-1,1,1,-1,-1,-1,0,0,1,0,1,1,-1,-1,0,0,0,-1,1,-1,1,0,0,1,1,0,-1,0,-1,-1,1,-1,0,0,0,0,-1,-1,0,-1,0,0,-1,0,1,-1,1,-1,0,1,-1,0,0,0,-1,-1,0,-1,1,-1,0,1,-1,0,0,-1,-1,-1,1,1,1,-1,-1,0,1,1,0,-1,-1,0,-1,-1,1,1,-1,1,-1,0,-1,-1,-1,-1,-1,1,1,0,1,-1,0,0,0,0,-1,-1,-1,1,1,0,0,1,0,-1,-1,-1,-1,0,1,1,1,0,0,0,-1,-1,-1,-1,-1,0,1,0,-1,-1,1,0,0,0,0,1,-1,1,1,0,1,0,0,-1,1,1,0,-1,1,-1,1,-1,-1,0,0,0,0,-1,-1,0,0,-1,-1,-1,1,-1,0,-1,-1,1,-1,-1,1,1,-1,0,1,1,-1,-1,-1,1,1,0,-1,-1,0,1,0,0,0,1,-1,-1,1,-1,-1,-1,-1,1,1,-1,1,1,1,1,0,0,0,1,1,0,1,0,0,1,1,0,0,-1,1,1,0,1,1,-1,-1,-1,0,1,-1,0,0,-1,1,-1,-1,0,1,0,-1,1,1,0,0,1,0,1,-1,-1,-1,0,-1,-1,-1,0,-1,0,1,1,-1,-1,-1,-1,0,1,1,1,-1,0,-1,1,-1,-1,0,0,0,-1,-1,0,1,-1,0,0,0,0,1,-1,-1,0,1,-1,1,1,-1,0,0,1,-1,1,1,0,-1,-1,0,0,1,1,-1,-1,0,-1,1,-1,0,1,-1,-1,-1,0,-1,-1,1,-1,-1,-1,-1,-1,1,0,-1,0,0,0,0,-1,-1,1,0,-1,-1,0,0,-1,1,-1,-1,0,1,0,1,-1,1,0,1,0,-1,0,0,-1,-1,1,0,0,-1,1,0,0,1,1,1,0,1,0,0,-1,1,1,1,1,-1,1,0,-1,1,-1,-1,1,1,-1,-1,-1,0,0,0,1,-1,-1,-1,-1,-1,0,0,1,1,1,1,1,0,-1,0,0,1,0,-1,0,-1,0,1,-1,0,-1,-1,-1,1,-1,1,0,0,0,0,-1,-1,1,1,1,0,0,-1,1,0,1,0,-1,0,1,0,1,0,1,-1,1,1,-1,0,-1,-1,1,1,1,-1,-1,1,-1,-1,1,0,1,1,0,1,1,1,-1,1,-1,1,-1,0,1,1,1,-1,1,1,0,0,-1,1,-1,-1,0,-1,0,1,0,1,1,0,1,1,-1,-1,1,1,1,-1,-1,0,-1,1,1,-1,0,0,1,0,-1,0,-1,0,-1,1,1,1,0,1,-1,0,-1,0,1,-1,-1,1,-1,1,1,-1,1,1,-1,1,1,0,0,1,0,-1,-1,1,1,0,0,-1,-1,1,0,-1,0,1,0,-1,-1,-1,1,0,-1,0,0,-1,1,0,0,0,1,0,1,-1,-1,1,1,-1,1,0,1,-1,-1,0,1,-1,1,1,-1,-1,0,1,1,1,-1,0,1,0,0,-1,1,0,0,-1,1,0,0,1,0,-1,1,-1,1,1,0,-1,0,-1,0,1,1,0,0,-1,1,0,1,0,-1,0,0,1,1,0,0,-1,1,0,1,1,1,1,1,0,1,0,1,1,0,1,0,0,1,1,-1,0,-1,1,0,1,-1,-1,0,0,1,-1,-1,0,-1,0,-1,-1,-1,1,1,1,0,0,1,1,1,-1,-1,0,1,1,0,1,-1,0,0,0,-1,-1,1,1,-1,0,0,1,0,1,-1,-1,-1,1,0,1,1,-1,0,1,-1,1,1,-1,-1,1,1,-1,0,0,1,0,-1,1,1,-1,1,-1,1,-1,0,-1,-1,0,-1,-1,0,-1,0,0,1,1,0,1,1,0,1,-1,-1,0,-1,1,-1,0,0,-1,1,0,1,1,1,-1,1,1,-1,1,0,1,1,0,0,0,0,-1,-1,1,0,1,0,0,0,1,0,-1,1,-1,-1,-1,-1,1,1,1,-1,0,1,-1,0,-1,-1,1,0,-1,0,-1,-1,-1,-1,0,0,-1,0,-1,-1,0,-1,1,0,-1,-1,1,-1,-1,0,1,1,1,0,0,-1,-1,0,0,0,1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,0,1,-1,0,1,1,-1,1,1,1,-1,-1,1,1,-1,-1,1,-1,0,-1,0,-1,1,0,0,1,-1,-1,-1,1,-1,1,-1,-1,1,0,-1,-1,0,-1,-1,1,0,0,1,1,1,0,0,0,1,0,-1,0,-1,1,-1,0,-1,1,-1,1,-1,0,-1,0,0,0,-1,-1,-1,-1,0,0,-1,0,1,-1,1,1,0,-1,1,1,1,-1,0,1,-1,-1,0,0,0,1,0,0,0,0,-1,0,1,1,-1,0,0,0,0,-1,0,1,0,-1,0,1,-1,0,-1,0,1,0,1,-1,1,0,0,-1,1,1,1,-1,0,0,0,1,-1,1,-1,0,0,-1,-1,-1,0,0,-1,-1,0,-1,1,1,-1,0,1,-1,1,0,1,0,0,0,0,-1,-1,0,-1,-1,-1,1,-1,-1,0,-1,1,0,0,-1,1,-1,-1,0,1,-1,-1,1,1,0,1,-1,-1,0,1,-1,-1,1,0,1,1,0,-1,-1,-1,0,1,-1,-1,-1,-1,1,-1,-1,1,1,-1,0,-1,0,0,1,-1,1,-1,0,-1,0,1,0,1,0,1,1,-1,0,-1,-1,-1,1,1,0,-1,1,0,0,1,1,0,0,0,0,-1,1,0,1,-1,0,-1,0,0,0,1,0,1,1,-1,-1,0,1,-1,1,0,0,-1,1,1,-1,1,0,0,-1,1,-1,1,-1,-1,0,-1,1,1,-1,0,1,1,-1,0,1,-1,-1,-1,0,1,-1,1,1,-1,-1,1,1,0,0,-1,1,1,0,-1,-1,0,0,0,0,1,1,0,0,0,0,0,-1,1,0,1,1,1,0,0,1,0,1,0,-1,-1,1,1,0,-1,0,-1,1,0,1,0,0,1,1,1,-1,0,1,0,0,0,-1,1,-1,0,1,0,-1,-1,1,-1,0,1,0,0,-1,-1,1,1,1,0,1,1,0,0,-1,0,0,1,-1,0,1,-1,1,0,-1,0,-1,0,0,0,-1,0,-1,-1,0,-1,-1,0,1,-1,0,-1,0,0,-1,-1,0,1,1,1,1,-1,0,1,1,0,-1,-1,0,0,-1,0,-1,0,-1,-1,1,-1,0,1,1,0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,-1,0,-1,0,-1,-1,-1,0,-1,-1,0,1,-1,0,-1,-1,0,0,-1,0,-1,0,0,0,1,-1,1,1,1,1,0,1,-1,0,-1,1,-1,1,1,0,-1,1,0,1,1,1,-1,-1,0,-1,1,-1,1,-1,0,-1,1,-1,-1,1,1,1,1,1,1,0,0,1,1,0,1,-1,0,-1,0,-1,-1,0,1,1,1,1,1,1,-1,1,-1,-1,1,0,0,0,-1,0,0,1,-1,0,1,0,0,-1,0,-1,0,1,0,-1,0,-1,0,1,1,0,1,-1,1,0,-1,0,-1,-1,1,0,-1,-1,1,0,0,-1,0,-1,0,0,-1,1,-1,0,-1,0,1,1,-1,1,1,1,0,1,0,1,-1,-1,0,1,0,0,1,1,0,0,0,-1,1,0,0,0,-1,-1,1,-1,1,1,-1,1,-1,1,-1,0,0,0,0,0,-1,-1,0,-1,-1,1,0,1,-1,1,0,1,1,-1,0,1,-1,0,-1,1,-1,0,-1,1,1,-1,-1,0,-1,1,1,-1,1,1,-1,-1,-1,-1,0,1,-1,-1,0,-1,-1,1,1,1,1,-1,1,-1,1,1,-1,0,1,1,1,1,1,1,1,-1,0,1,1,0,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,-1,-1,-1,0,0,1,-1,0,-1,-1,1,1,-1,1,-1,0,0,0,0,0,0,0,0,-1,1,-1,-1,-1,-1,1,0,-1,1,1,1,0,0,-1,0,-1,1,1,1,-1,1,-1,0,1,0,1,0,0,1,0,1,0,-1,1,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,1,-1,-1,0,-1,0,-1,0,0,-1,1,-1,-1,0,1,0,-1,1,1,-1,0,-1,-1,0,1,0,1,1,0,-1,1,0,1,0,-1,0,1,1,0,1,1,1,0,1,0,-1,1,-1,0,1,0,1,-1,1,1,0,0,-1,1,1,1,0,1,0,0,-1,1,0,1,-1,0,1,0,-1,0,-1,0,1,1,-1,-1,-1,-1,0,1,0,0,0,-1,0,-1,-1,1,0,-1,1,0,0,-1,1,1,-1,0,-1,-1,0,0,-1,0,-1,-1,-1,1,0,0,-1,0,-1,-1,0,1,0,-1,-1,-1,0,1,-1,0,0,-1,0,1,-1,1,0,0,-1,1,0,1,0,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,1,0,1,-1,0,1,1,-1,1,0,0,-1,-1,-1,1,0,1,1,1,0,-1,0,0,-1,0,-1,1,1,1,-1,0,0,-1,-1,0,-1,1,1,1,-1,0,0,-1,1,0,0,-1,0,-1,1,-1,-1,0,1,-1,1,0,1,1,1,-1,-1,1,-1,-1,-1,-1,0,0,-1,1,1,-1,-1,1,0,1,-1,-1,-1,1,-1,1,1,0,1,1,-1,-1,1,1,0,1,-1,0,-1,1,1,1,-1,1,-1,1,-1,-1,0,1,1,-1,1,1,1,0,-1,1,0,-1,0,-1,1,-1,-1,-1,1,0,0,-1,-1,1,1,0,-1,1,0,1,-1,-1,-1,-1,0,0,-1,1,0,0,1,-1,0,1,-1,1,0,-1,1,0,0,-1,1,-1,-1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,-1,0,1,-1,0,-1,-1,1,-1,1,1,1,1,0,1,0,1,1,1,1,-1,-1,1,1,0,-1,-1,1,-1,1,1,0,0,0,1,-1,1,1,1,-1,0,0,0,1,1,-1,0,-1,1,0,-1,1,1,0,1,1,1,1,1,1,1,1,-1,1,1,-1,0,-1,-1,1,-1,1,-1,-1,0,-1,-1,0,0,-1,1,0,-1,0,-1,1,1,1,1,0,1,-1,1,1,-1,1,0,1,-1,0,1,-1,-1,0,0,-1,-1,0,0,-1,-1,1,-1,-1,0,0,1,0,-1,1,0,0,-1,0,-1,0,-1,-1,-1,1,1,0,1,0,1,1,-1,1,1,-1,0,0,0,-1,1,0,-1,1,1,-1,1,0,0,-1,0,-1,-1,1,0,-1,0,1,0,1,1,1,-1,-1,0,0,0,-1,-1,-1,1,-1,-1,0,0,0,0,-1,-1,-1,0,1,-1,-1,-1,1,0,1,-1,0,-1,-1,-1,1,-1,0,-1,-1,1,-1,0,-1,1,1,0,0,-1,-1,-1,1,1,0,0,-1,1,1,1,-1,-1,1,0,0,1,-1,1,-1,-1,1,-1,1,0,1,1,-1,1,0,1,-1,0,0,0,-1,-1,0,-1,-1,0,1,-1,1,-1,1,0,0,-1,-1,1,0,0,1,1,1,1,0,-1,0,1,0,-1,0,0,-1,1,-1,0,0,-1,1,-1,1,0,-1,1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,0,0,-1,-1,-1,0,-1,1,-1,0,-1,0,0,0,1,1,1,1,1,0,-1,1,1,-1,0,-1,-1,0,-1,0,1,1,-1,-1,-1,-1,0,0,-1,0,0,0,1,-1,1,1,1,-1,1,1,0,1,0,1,-1,-1,0,1,0,1,1,1,-1,0,1,1,1,-1,0,-1,-1,1,0,-1,0,0,0,1,-1,1,-1,0,1,-1,-1,1,0,-1,0,-1,1,-1,-1,1,-1,0,0,0,0,1,1,-1,-1,-1,0,0,-1,0,-1,-1,0,0,-1,1,0,1,0,0,0,-1,1,-1,0,-1,1,0,1,-1,1,-1,-1,-1,1,-1,0,-1,-1,0,1,0,0,0,1,-1,-1,-1,0,1,0,0,1,0,-1,0,0,1,-1,1,0,-1,1,0,1,0,0,-1,-1,1,1,0,-1,-1,-1,-1,0,0,-1,-1,-1,-1,0,1,-1,1,1,1,-1,0,1,0,1,1,-1,1,-1,0,1,1,-1,-1,-1,0,0,-1,0,0,0,0,1,1,-1,-1,1,-1,-1,-1,0,1,0,-1,-1,1,0,1,-1,1,-1,1,1,1,1,-1,0,1,-1,0,-1,0,0,1,1,-1,0,0,1,-1,0,0,1,-1,-1,-1,1,1,0,1,-1,1,1,-1,0,-1,-1,0,1,0,1,-1,0,-1,0,0,1,-1,0,1,1,0,-1,-1,1,-1,-1,0,-1,-1,1,0,0,1,1,1,-1,-1,-1,-1,1,0,-1,1,0,1,0,1,1,0,0,0,-1,1,-1,0,1,1,0,-1,0,1,-1,0,-1,1,0,-1,0,0,-1,0,-1,1,-1,1,1,1,0,1,-1,1,1,-1,-1,0,-1,-1,1,1,0,0,0,-1,1,-1,1,0,1,0,1,1,1,0,-1,1,1,0,0,-1,1,0,1,0,-1,1,1,0,0,0,-1,0,-1,1,1,0,0,1,-1,-1,1,0,0,-1,0,-1,0,0,1,-1,0,0,-1,-1,1,0,-1,0,0,-1,-1,0,0,0,1,0,0,-1,0,1,0,-1,0,1,0,-1,-1,-1,1,0,1,0,1,1,-1,0,-1,1,-1,0,0,-1,1,1,0,1,1,1,1,0,1,-1,1,0,-1,1,0,0,-1,0,0,1,-1,-1,0,0,-1,0,0,1,-1,-1,-1,0,0,0,0,-1,1,0,0,-1,-1,-1,1,-1,-1,0,1,0,1,0,-1,1,0,-1,0,-1,-1,1,0,1,1,-1,1,1,1,-1,0,0,0,-1,0,1,1,1,-1,1,-1,0,-1,0,1,0,-1,-1,0,-1,-1,-1,-1,1,-1,0,0,0,-1,1,-1,-1,-1,1,-1,-1,1,0,1,0,-1,-1,0,-1,0,0,0,1,0,-1,0,-1,1,1,-1,-1,-1,1,-1,-1,1,1,1,-1,0,0,1,1,-1,1,-1,1,-1,1,-1,1,-1,-1,-1,-1,1,-1,0,0,0,0,0,-1,0,-1,1,-1,1,1,1,-1,0,1,0,1,0,-1,-1,1,1,1,1,0,1,0,0,-1,0,1,1,-1,1,-1,-1,1,1,1,-1,1,0,0,-1,0,0,-1,1,1,0,0,1,0,1,1,1,1,0,0,1,-1,0,-1,1,-1,0,0,0,0,1,0,0,1,0,1,0,0,1,-1,1,0,1,0,-1,-1,0,1,1,1,-1,-1,-1,1,1,0,0,-1,-1,-1,-1,0,-1,0,1,0,1,1,1,0,0,-1,0,1,-1,0,-1,1,1,0,1,0,-1,-1,-1,-1,0,1,0,0,-1,1,0,1,0,-1,1,0,1,-1,1,0,1,0,0,0,1,1,-1,1,0,-1,1,0,0,0,0,1,-1,1,1,1,-1,1,-1,1,0,0,1,1,-1,-1,1,0,0,0,-1,-1,1,0,1,-1,1,0,-1,-1,1,-1,0,-1,1,1,1,0,0,-1,1,-1,-1,-1,-1,1,1,1,-1,1,-1,-1,-1,-1,0,1,-1,0,0,0,0,-1,0,0,0,1,-1,-1,0,0,1,-1,-1,0,-1,0,1,0,1,-1,-1,0,1,1,0,0,-1,-1,0,-1,1,0,0,1,1,-1,-1,1,0,-1,1,1,0,1,-1,0,-1,1,1,1,0,0,0,-1,-1,-1,-1,1,-1,1,1,0,1,1,1,0,-1,-1,0,-1,1,1,1,-1,1,0,0,-1,1,1,0,1,1,0,-1,-1,0,-1,-1,-1,-1,0,1,0,-1,0,0,0,0,1,-1,0,1,0,-1,-1,1,-1,0,0,1,0,-1,0,0,-1,0,0,-1,1,1,0,-1,-1,1,1,0,1,-1,0,0,-1,1,0,0,0,1,-1,0,0,0,-1,-1,-1,-1,-1,0,-1,1,-1,-1,1,1,-1,0,1,0,1,-1,0,0,0,-1,1,0,0,-1,0,-1,1,1,1,1,1,0,-1,0,-1,1,1,1,1,1,1,1,1,0,-1,0,1,0,0,-1,-1,1,-1,-1,1,0,0,0,-1,0,0,1,-1,0,1,1,1,0,0,0,1,-1,-1,1,1,0,-1,-1,1,1,-1,1,1,0,0,-1,-1,-1,1,0,0,-1,0,1,-1,0,0,0,0,0,-1,-1,1,0,1,1,0,0,0,-1,1,0,0,1,0,-1,0,-1,1,-1,0,0,0,-1,-1,-1,1,-1,0,0,0,0,0,0,0,1,-1,1,0,1,1,1,0,-1,0,0,1,0,-1,1,1,-1,0,0,0,0,0,0,1,1,0,-1,0,-1,1,-1,1,0,-1,0,-1,-1,1,1,0,1,-1,0,1,0,-1,0,-1,-1,0,-1,-1,0,0,0,0,0,-1,-1,0,1,1,-1,1,1,1,0,1,1,1,1,-1,0,0,-1,0,0,1,-1,0,-1,-1,-1,0,1,-1,0,0,-1,-1,1,-1,1,-1,-1,0,0,1,-1,-1,1,0,0,0,1,-1,0,1,0,1,1,1,1,1,1,0,1,1,0,0,0,-1,0,1,-1,0,0,0,0,0,0,0,1,1,0,1,0,1,0,-1,1,0,-1,-1,0,-1,0,1,1,1,0,0,1,0,0,1,0,0,-1,-1,1,0,-1,1,0,1,-1,1,-1,-1,-1,1,1,-1,1,1,-1,0,1,-1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,1,1,-1,0,0,0,0,0,0,-1,1,-1,0,0,0,-1,0,1,-1,1,-1,0,-1,0,1,1,1,0,1,1,0,0,0,-1,-1,1,0,1,-1,-1,0,0,1,-1,0,1,0,0,1,1,0,0,0,1,-1,-1,-1,-1,0,1,0,1,0,1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,-1,-1,-1,1,-1,-1,0,-1,0,-1,0,-1,1,1,-1,1,-1,0,0,1,-1,0,1,1,0,0,-1,-1,0,1,-1,0,0,1,0,1,-1,1,1,-1,0,0,-1,1,-1,1,-1,0,0,-1,0,-1,1,-1,1,-1,0,0,0,0,0,0,0,0,1,-1,0,1,1,0,1,0,1,0,0,1,-1,0,0,-1,-1,0,-1,0,1,-1,1,-1,0,1,1,1,1,1,-1,1,-1,0,-1,1,1,0,-1,0,1,0,-1,-1,1,0,1,-1,0,0,1,-1,1,0,0,0,1,1,1,0,-1,0,0,0,1,-1,1,-1,1,1,-1,0,-1,0,0,0,0,1,1,0,-1,-1,-1,-1,0,0,0,-1,0,-1,-1,-1,0,-1,1,0,-1,-1,0,0,1,0,0,-1,-1,-1,0,-1,-1,1,1,-1,0,0,1,1,0,-1,-1,-1,-1,1,-1,0,1,-1,0,-1,0,0,-1,0,-1,-1,1,1,0,0,0,-1,1,1,-1,1,0,-1,1,1,1,0,0]
		}
	]

	tests.forEach(function(test) {
		it(`Should generate valid trits signature:` + test.signature, async function() {
			const signature = await genSignatureTritsFunc(test.seed, test.index, test.security, test.bundle)
			assert.deepEqual(test.signature, signature)
		})
	})
})

describe('IotaCommon.transactionHashFunc', function() {
	const tests = [
		{
			trytes
			hash: 'EBCGQXTGVGYPVKWI9AHYCVNXBLDJOHVKIMPOCJJE99PUOZJKNTLDLVBLZLXABOCKLQVVDACL9VHWST999'
		}
	]

	tests.forEach(function(test) {
		it(`Should generate valid transaction hash:` + test.hash, async function() {
			const hash = await transactionHashFunc(test.trytes)
			assert.deepEqual(test.hash, hash)
		})
	})
})

describe('IotaCommon.bundleMiner', function() {
	const tests = [
		{
			max: [13, 13, 13, 13, 13, 11, -7,  -3, 6, 4,  9,  11, 13, -7, 5,  5,  9, -9, 1,  5,  -4,
				  9,  0,  -8, -9, 6,  10, 13,  11, 8, 2,  7,  13, 1,  6,  -1, 6,  7, 6,  7,  11, 4,
			      -1, 4,  -3, 11, -8, 6,  -1,  1,  0, 1,  10, 8,  13, 13, 1,  2,  7, 7,  11, 9,  10,
				  1,  -5, 1,  12, 11, 13, -10, 12, 5, 12, 0,  -5, 2,  -8, 6,  11, 6, 5],
			security: 2,
			essence: Array(486 * 4).fill(0),
			essenceLength: 486 * 4,
			count: 1000,
			index: 561,
			nprocs: 0,
			miningThreshold: 3**40
		}
	]

	tests.forEach(function(test) {
		it(`Mined index should be: ` + test.index, async function() {
			this.timeout(0)
			const index = await bundleMiner(test.max, test.security, test.essence, test.essenceLength, test.count, test.nprocs, test.miningThreshold)
			assert.equal(test.index, index)
		})
	})
})
